// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: workflow-service.proto

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkflowService_InsertWorkflow_FullMethodName          = "/workflow.WorkflowService/InsertWorkflow"
	WorkflowService_GetWorkflowsByProjectId_FullMethodName = "/workflow.WorkflowService/GetWorkflowsByProjectId"
	WorkflowService_UpdateTaskStatus_FullMethodName        = "/workflow.WorkflowService/UpdateTaskStatus"
	WorkflowService_RemoveTaskFromWorkflow_FullMethodName  = "/workflow.WorkflowService/RemoveTaskFromWorkflow"
	WorkflowService_CheckTask_FullMethodName               = "/workflow.WorkflowService/CheckTask"
)

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	InsertWorkflow(ctx context.Context, in *InsertWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowByIdResponse, error)
	GetWorkflowsByProjectId(ctx context.Context, in *GetWorkflowsByProjectIdRequest, opts ...grpc.CallOption) (*GetWorkflowsByProjectIdResponse, error)
	UpdateTaskStatus(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	RemoveTaskFromWorkflow(ctx context.Context, in *RemoveTaskFromWorkflowRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	CheckTask(ctx context.Context, in *CheckTaskRequest, opts ...grpc.CallOption) (*CheckTaskResponse, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) InsertWorkflow(ctx context.Context, in *InsertWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowByIdResponse, error) {
	out := new(GetWorkflowByIdResponse)
	err := c.cc.Invoke(ctx, WorkflowService_InsertWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowsByProjectId(ctx context.Context, in *GetWorkflowsByProjectIdRequest, opts ...grpc.CallOption) (*GetWorkflowsByProjectIdResponse, error) {
	out := new(GetWorkflowsByProjectIdResponse)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowsByProjectId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) UpdateTaskStatus(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, WorkflowService_UpdateTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) RemoveTaskFromWorkflow(ctx context.Context, in *RemoveTaskFromWorkflowRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, WorkflowService_RemoveTaskFromWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) CheckTask(ctx context.Context, in *CheckTaskRequest, opts ...grpc.CallOption) (*CheckTaskResponse, error) {
	out := new(CheckTaskResponse)
	err := c.cc.Invoke(ctx, WorkflowService_CheckTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations must embed UnimplementedWorkflowServiceServer
// for forward compatibility
type WorkflowServiceServer interface {
	InsertWorkflow(context.Context, *InsertWorkflowRequest) (*GetWorkflowByIdResponse, error)
	GetWorkflowsByProjectId(context.Context, *GetWorkflowsByProjectIdRequest) (*GetWorkflowsByProjectIdResponse, error)
	UpdateTaskStatus(context.Context, *UpdateTaskRequest) (*SuccessResponse, error)
	RemoveTaskFromWorkflow(context.Context, *RemoveTaskFromWorkflowRequest) (*SuccessResponse, error)
	CheckTask(context.Context, *CheckTaskRequest) (*CheckTaskResponse, error)
	mustEmbedUnimplementedWorkflowServiceServer()
}

// UnimplementedWorkflowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServiceServer struct {
}

func (UnimplementedWorkflowServiceServer) InsertWorkflow(context.Context, *InsertWorkflowRequest) (*GetWorkflowByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowsByProjectId(context.Context, *GetWorkflowsByProjectIdRequest) (*GetWorkflowsByProjectIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowsByProjectId not implemented")
}
func (UnimplementedWorkflowServiceServer) UpdateTaskStatus(context.Context, *UpdateTaskRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedWorkflowServiceServer) RemoveTaskFromWorkflow(context.Context, *RemoveTaskFromWorkflowRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTaskFromWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) CheckTask(context.Context, *CheckTaskRequest) (*CheckTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTask not implemented")
}
func (UnimplementedWorkflowServiceServer) mustEmbedUnimplementedWorkflowServiceServer() {}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_InsertWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).InsertWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_InsertWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).InsertWorkflow(ctx, req.(*InsertWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowsByProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowsByProjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowsByProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowsByProjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowsByProjectId(ctx, req.(*GetWorkflowsByProjectIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).UpdateTaskStatus(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_RemoveTaskFromWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTaskFromWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).RemoveTaskFromWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_RemoveTaskFromWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).RemoveTaskFromWorkflow(ctx, req.(*RemoveTaskFromWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_CheckTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CheckTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CheckTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CheckTask(ctx, req.(*CheckTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertWorkflow",
			Handler:    _WorkflowService_InsertWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowsByProjectId",
			Handler:    _WorkflowService_GetWorkflowsByProjectId_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _WorkflowService_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "RemoveTaskFromWorkflow",
			Handler:    _WorkflowService_RemoveTaskFromWorkflow_Handler,
		},
		{
			MethodName: "CheckTask",
			Handler:    _WorkflowService_CheckTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow-service.proto",
}
