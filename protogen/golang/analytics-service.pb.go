// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: analytics-service.proto

package analytics

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalyticsNumberOfTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AnalyticsNumberOfTasksRequest) Reset() {
	*x = AnalyticsNumberOfTasksRequest{}
	mi := &file_analytics_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsNumberOfTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsNumberOfTasksRequest) ProtoMessage() {}

func (x *AnalyticsNumberOfTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsNumberOfTasksRequest.ProtoReflect.Descriptor instead.
func (*AnalyticsNumberOfTasksRequest) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyticsNumberOfTasksRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsNumberOfTasksRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AnalyticsNumberOfTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TaskCount int32  `protobuf:"varint,3,opt,name=taskCount,proto3" json:"taskCount,omitempty"`
}

func (x *AnalyticsNumberOfTasksResponse) Reset() {
	*x = AnalyticsNumberOfTasksResponse{}
	mi := &file_analytics_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsNumberOfTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsNumberOfTasksResponse) ProtoMessage() {}

func (x *AnalyticsNumberOfTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsNumberOfTasksResponse.ProtoReflect.Descriptor instead.
func (*AnalyticsNumberOfTasksResponse) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyticsNumberOfTasksResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsNumberOfTasksResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsNumberOfTasksResponse) GetTaskCount() int32 {
	if x != nil {
		return x.TaskCount
	}
	return 0
}

type AnalyticsNumberOfTasksByStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TaskStatus string `protobuf:"bytes,3,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`
}

func (x *AnalyticsNumberOfTasksByStatusRequest) Reset() {
	*x = AnalyticsNumberOfTasksByStatusRequest{}
	mi := &file_analytics_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsNumberOfTasksByStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsNumberOfTasksByStatusRequest) ProtoMessage() {}

func (x *AnalyticsNumberOfTasksByStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsNumberOfTasksByStatusRequest.ProtoReflect.Descriptor instead.
func (*AnalyticsNumberOfTasksByStatusRequest) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyticsNumberOfTasksByStatusRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsNumberOfTasksByStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsNumberOfTasksByStatusRequest) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

type AnalyticsNumberOfTasksByStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TaskCount  int32  `protobuf:"varint,3,opt,name=taskCount,proto3" json:"taskCount,omitempty"`
	TaskStatus string `protobuf:"bytes,4,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`
}

func (x *AnalyticsNumberOfTasksByStatusResponse) Reset() {
	*x = AnalyticsNumberOfTasksByStatusResponse{}
	mi := &file_analytics_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsNumberOfTasksByStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsNumberOfTasksByStatusResponse) ProtoMessage() {}

func (x *AnalyticsNumberOfTasksByStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsNumberOfTasksByStatusResponse.ProtoReflect.Descriptor instead.
func (*AnalyticsNumberOfTasksByStatusResponse) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{3}
}

func (x *AnalyticsNumberOfTasksByStatusResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsNumberOfTasksByStatusResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsNumberOfTasksByStatusResponse) GetTaskCount() int32 {
	if x != nil {
		return x.TaskCount
	}
	return 0
}

func (x *AnalyticsNumberOfTasksByStatusResponse) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

type AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       string                 `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TaskId          string                 `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	TaskStatus      string                 `protobuf:"bytes,4,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`
	StatusStartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=statusStartTime,proto3" json:"statusStartTime,omitempty"`
	StatusEndTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=statusEndTime,proto3" json:"statusEndTime,omitempty"`
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) Reset() {
	*x = AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest{}
	mi := &file_analytics_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) ProtoMessage() {}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest.ProtoReflect.Descriptor instead.
func (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{4}
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) GetStatusStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusStartTime
	}
	return nil
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) GetStatusEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusEndTime
	}
	return nil
}

type AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       string                 `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TaskId          string                 `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	TaskStatus      string                 `protobuf:"bytes,4,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`
	StatusStartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=statusStartTime,proto3" json:"statusStartTime,omitempty"`
	StatusEndTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=statusEndTime,proto3" json:"statusEndTime,omitempty"`
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) Reset() {
	*x = AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse{}
	mi := &file_analytics_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) ProtoMessage() {}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse.ProtoReflect.Descriptor instead.
func (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{5}
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) GetStatusStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusStartTime
	}
	return nil
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse) GetStatusEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusEndTime
	}
	return nil
}

type AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse) Reset() {
	*x = AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse{}
	mi := &file_analytics_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse) ProtoMessage() {}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse.ProtoReflect.Descriptor instead.
func (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{6}
}

func (x *AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse) GetResponses() []*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TaskId    string `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) Reset() {
	*x = AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest{}
	mi := &file_analytics_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) ProtoMessage() {}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest.ProtoReflect.Descriptor instead.
func (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{7}
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TaskId    string `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse) Reset() {
	*x = AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse{}
	mi := &file_analytics_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse) ProtoMessage() {}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse.ProtoReflect.Descriptor instead.
func (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{8}
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type TaskIdsListRespnse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIds []string `protobuf:"bytes,1,rep,name=taskIds,proto3" json:"taskIds,omitempty"`
}

func (x *TaskIdsListRespnse) Reset() {
	*x = TaskIdsListRespnse{}
	mi := &file_analytics_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskIdsListRespnse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdsListRespnse) ProtoMessage() {}

func (x *TaskIdsListRespnse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdsListRespnse.ProtoReflect.Descriptor instead.
func (*TaskIdsListRespnse) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{9}
}

func (x *TaskIdsListRespnse) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type AnalyticsIsProjectFinishedByDeadlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string                 `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId    string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Deadline  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Finished  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *AnalyticsIsProjectFinishedByDeadlineRequest) Reset() {
	*x = AnalyticsIsProjectFinishedByDeadlineRequest{}
	mi := &file_analytics_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsIsProjectFinishedByDeadlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsIsProjectFinishedByDeadlineRequest) ProtoMessage() {}

func (x *AnalyticsIsProjectFinishedByDeadlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsIsProjectFinishedByDeadlineRequest.ProtoReflect.Descriptor instead.
func (*AnalyticsIsProjectFinishedByDeadlineRequest) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{10}
}

func (x *AnalyticsIsProjectFinishedByDeadlineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsIsProjectFinishedByDeadlineRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsIsProjectFinishedByDeadlineRequest) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *AnalyticsIsProjectFinishedByDeadlineRequest) GetFinished() *timestamppb.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

type AnalyticsIsProjectFinishedByDeadlineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string                 `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId    string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Deadline  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Finished  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *AnalyticsIsProjectFinishedByDeadlineResponse) Reset() {
	*x = AnalyticsIsProjectFinishedByDeadlineResponse{}
	mi := &file_analytics_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsIsProjectFinishedByDeadlineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsIsProjectFinishedByDeadlineResponse) ProtoMessage() {}

func (x *AnalyticsIsProjectFinishedByDeadlineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsIsProjectFinishedByDeadlineResponse.ProtoReflect.Descriptor instead.
func (*AnalyticsIsProjectFinishedByDeadlineResponse) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{11}
}

func (x *AnalyticsIsProjectFinishedByDeadlineResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AnalyticsIsProjectFinishedByDeadlineResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsIsProjectFinishedByDeadlineResponse) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *AnalyticsIsProjectFinishedByDeadlineResponse) GetFinished() *timestamppb.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

type IsFinishedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinishedByDeadline bool `protobuf:"varint,3,opt,name=isFinishedByDeadline,proto3" json:"isFinishedByDeadline,omitempty"`
}

func (x *IsFinishedResponse) Reset() {
	*x = IsFinishedResponse{}
	mi := &file_analytics_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFinishedResponse) ProtoMessage() {}

func (x *IsFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFinishedResponse.ProtoReflect.Descriptor instead.
func (*IsFinishedResponse) Descriptor() ([]byte, []int) {
	return file_analytics_service_proto_rawDescGZIP(), []int{12}
}

func (x *IsFinishedResponse) GetIsFinishedByDeadline() bool {
	if x != nil {
		return x.IsFinishedByDeadline
	}
	return false
}

var File_analytics_service_proto protoreflect.FileDescriptor

var file_analytics_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x1d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x1e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x7d, 0x0a, 0x25, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x9c, 0x01, 0x0a, 0x26, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xad,
	0x02, 0x0a, 0x35, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae,
	0x02, 0x0a, 0x36, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x9d, 0x01, 0x0a, 0x3a, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72,
	0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x73,
	0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0x86, 0x01, 0x0a, 0x36, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72,
	0x45, 0x61, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x49, 0x73, 0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x37, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x73, 0x48,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x2b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x42, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x2c, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22,
	0x48, 0x0a, 0x12, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42,
	0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0xd3, 0x1b, 0x0a, 0x10, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9e,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0xa4, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x28, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a,
	0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x27, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a,
	0x01, 0x2a, 0x1a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x12, 0xb8, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x1a, 0x2d, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x2f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0xc8, 0x01, 0x0a,
	0x2a, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xce, 0x01, 0x0a, 0x2d, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xd9, 0x01, 0x0a, 0x2f, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x1a, 0x36, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x2f, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x1a, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x89, 0x02, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d,
	0x75, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f,
	0x72, 0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8b, 0x02, 0x0a,
	0x34, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61,
	0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72,
	0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x48, 0x3a, 0x01, 0x2a, 0x22, 0x43, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f,
	0x72, 0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8d, 0x02, 0x0a, 0x36, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61,
	0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72,
	0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x48, 0x3a, 0x01, 0x2a, 0x1a, 0x43, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f,
	0x72, 0x45, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x77, 0x4d, 0x75, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x32, 0x47,
	0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x49, 0x73, 0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f,
	0x6e, 0x12, 0x41, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x73,
	0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x73, 0x48, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x12, 0x88, 0x02, 0x0a, 0x35, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f,
	0x72, 0x45, 0x61, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x73, 0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x4f, 0x6e, 0x12, 0x41, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x49, 0x73, 0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72,
	0x45, 0x61, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x49, 0x73, 0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x42, 0x3a, 0x01, 0x2a, 0x22, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x73, 0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x12, 0x85, 0x02, 0x0a, 0x35, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x49, 0x73, 0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x12,
	0x41, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x73, 0x48, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x42, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49,
	0x73, 0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x2a, 0x3d,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x73,
	0x48, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x12, 0xdc, 0x01,
	0x0a, 0x2a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xb0, 0x01, 0x0a,
	0x1b, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x11, 0x5a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_analytics_service_proto_rawDescOnce sync.Once
	file_analytics_service_proto_rawDescData = file_analytics_service_proto_rawDesc
)

func file_analytics_service_proto_rawDescGZIP() []byte {
	file_analytics_service_proto_rawDescOnce.Do(func() {
		file_analytics_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_analytics_service_proto_rawDescData)
	})
	return file_analytics_service_proto_rawDescData
}

var file_analytics_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_analytics_service_proto_goTypes = []any{
	(*AnalyticsNumberOfTasksRequest)(nil),                              // 0: analytics.AnalyticsNumberOfTasksRequest
	(*AnalyticsNumberOfTasksResponse)(nil),                             // 1: analytics.AnalyticsNumberOfTasksResponse
	(*AnalyticsNumberOfTasksByStatusRequest)(nil),                      // 2: analytics.AnalyticsNumberOfTasksByStatusRequest
	(*AnalyticsNumberOfTasksByStatusResponse)(nil),                     // 3: analytics.AnalyticsNumberOfTasksByStatusResponse
	(*AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest)(nil),      // 4: analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest
	(*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse)(nil),     // 5: analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse
	(*AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse)(nil), // 6: analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse
	(*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest)(nil),     // 7: analytics.AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest
	(*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse)(nil),    // 8: analytics.AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse
	(*TaskIdsListRespnse)(nil),                                         // 9: analytics.TaskIdsListRespnse
	(*AnalyticsIsProjectFinishedByDeadlineRequest)(nil),                // 10: analytics.AnalyticsIsProjectFinishedByDeadlineRequest
	(*AnalyticsIsProjectFinishedByDeadlineResponse)(nil),               // 11: analytics.AnalyticsIsProjectFinishedByDeadlineResponse
	(*IsFinishedResponse)(nil),                                         // 12: analytics.IsFinishedResponse
	(*timestamppb.Timestamp)(nil),                                      // 13: google.protobuf.Timestamp
}
var file_analytics_service_proto_depIdxs = []int32{
	13, // 0: analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest.statusStartTime:type_name -> google.protobuf.Timestamp
	13, // 1: analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest.statusEndTime:type_name -> google.protobuf.Timestamp
	13, // 2: analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse.statusStartTime:type_name -> google.protobuf.Timestamp
	13, // 3: analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse.statusEndTime:type_name -> google.protobuf.Timestamp
	5,  // 4: analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse.responses:type_name -> analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse
	13, // 5: analytics.AnalyticsIsProjectFinishedByDeadlineRequest.deadline:type_name -> google.protobuf.Timestamp
	13, // 6: analytics.AnalyticsIsProjectFinishedByDeadlineRequest.finished:type_name -> google.protobuf.Timestamp
	13, // 7: analytics.AnalyticsIsProjectFinishedByDeadlineResponse.deadline:type_name -> google.protobuf.Timestamp
	13, // 8: analytics.AnalyticsIsProjectFinishedByDeadlineResponse.finished:type_name -> google.protobuf.Timestamp
	0,  // 9: analytics.AnalyticsService.GetAnalyticsNumberOfTasks:input_type -> analytics.AnalyticsNumberOfTasksRequest
	0,  // 10: analytics.AnalyticsService.InsertAnalyticsNumberOfTasks:input_type -> analytics.AnalyticsNumberOfTasksRequest
	0,  // 11: analytics.AnalyticsService.IncreaseAnalyticsNumberOfTasksTaskCount:input_type -> analytics.AnalyticsNumberOfTasksRequest
	0,  // 12: analytics.AnalyticsService.DecreaseAnalyticsNumberOfTasksTaskCount:input_type -> analytics.AnalyticsNumberOfTasksRequest
	2,  // 13: analytics.AnalyticsService.GetAnalyticsNumberOfTasksByStatusTaskCount:input_type -> analytics.AnalyticsNumberOfTasksByStatusRequest
	2,  // 14: analytics.AnalyticsService.InsertAnalyticsNumberOfTasksByStatusTaskCount:input_type -> analytics.AnalyticsNumberOfTasksByStatusRequest
	2,  // 15: analytics.AnalyticsService.IncreaseAnalyticsNumberOfTasksByStatusTaskCount:input_type -> analytics.AnalyticsNumberOfTasksByStatusRequest
	2,  // 16: analytics.AnalyticsService.DecreaseAnalyticsNumberOfTasksByStatusTaskCount:input_type -> analytics.AnalyticsNumberOfTasksByStatusRequest
	4,  // 17: analytics.AnalyticsService.GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus:input_type -> analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest
	4,  // 18: analytics.AnalyticsService.InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus:input_type -> analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest
	4,  // 19: analytics.AnalyticsService.IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus:input_type -> analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest
	7,  // 20: analytics.AnalyticsService.GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn:input_type -> analytics.AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest
	7,  // 21: analytics.AnalyticsService.InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn:input_type -> analytics.AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest
	7,  // 22: analytics.AnalyticsService.RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn:input_type -> analytics.AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest
	10, // 23: analytics.AnalyticsService.InsertAnalyticsIsProjectFinishedByDeadline:input_type -> analytics.AnalyticsIsProjectFinishedByDeadlineRequest
	10, // 24: analytics.AnalyticsService.IsProjectFinishedByDeadline:input_type -> analytics.AnalyticsIsProjectFinishedByDeadlineRequest
	1,  // 25: analytics.AnalyticsService.GetAnalyticsNumberOfTasks:output_type -> analytics.AnalyticsNumberOfTasksResponse
	1,  // 26: analytics.AnalyticsService.InsertAnalyticsNumberOfTasks:output_type -> analytics.AnalyticsNumberOfTasksResponse
	1,  // 27: analytics.AnalyticsService.IncreaseAnalyticsNumberOfTasksTaskCount:output_type -> analytics.AnalyticsNumberOfTasksResponse
	1,  // 28: analytics.AnalyticsService.DecreaseAnalyticsNumberOfTasksTaskCount:output_type -> analytics.AnalyticsNumberOfTasksResponse
	3,  // 29: analytics.AnalyticsService.GetAnalyticsNumberOfTasksByStatusTaskCount:output_type -> analytics.AnalyticsNumberOfTasksByStatusResponse
	3,  // 30: analytics.AnalyticsService.InsertAnalyticsNumberOfTasksByStatusTaskCount:output_type -> analytics.AnalyticsNumberOfTasksByStatusResponse
	3,  // 31: analytics.AnalyticsService.IncreaseAnalyticsNumberOfTasksByStatusTaskCount:output_type -> analytics.AnalyticsNumberOfTasksByStatusResponse
	3,  // 32: analytics.AnalyticsService.DecreaseAnalyticsNumberOfTasksByStatusTaskCount:output_type -> analytics.AnalyticsNumberOfTasksByStatusResponse
	6,  // 33: analytics.AnalyticsService.GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus:output_type -> analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse
	5,  // 34: analytics.AnalyticsService.InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus:output_type -> analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse
	5,  // 35: analytics.AnalyticsService.IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus:output_type -> analytics.AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse
	9,  // 36: analytics.AnalyticsService.GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn:output_type -> analytics.TaskIdsListRespnse
	8,  // 37: analytics.AnalyticsService.InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn:output_type -> analytics.AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse
	8,  // 38: analytics.AnalyticsService.RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn:output_type -> analytics.AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse
	11, // 39: analytics.AnalyticsService.InsertAnalyticsIsProjectFinishedByDeadline:output_type -> analytics.AnalyticsIsProjectFinishedByDeadlineResponse
	12, // 40: analytics.AnalyticsService.IsProjectFinishedByDeadline:output_type -> analytics.IsFinishedResponse
	25, // [25:41] is the sub-list for method output_type
	9,  // [9:25] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_analytics_service_proto_init() }
func file_analytics_service_proto_init() {
	if File_analytics_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analytics_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_analytics_service_proto_goTypes,
		DependencyIndexes: file_analytics_service_proto_depIdxs,
		MessageInfos:      file_analytics_service_proto_msgTypes,
	}.Build()
	File_analytics_service_proto = out.File
	file_analytics_service_proto_rawDesc = nil
	file_analytics_service_proto_goTypes = nil
	file_analytics_service_proto_depIdxs = nil
}
