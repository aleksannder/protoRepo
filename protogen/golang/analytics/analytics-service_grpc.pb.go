// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: analytics-service.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_GetAnalyticsNumberOfTasks_FullMethodName                              = "/analytics.AnalyticsService/GetAnalyticsNumberOfTasks"
	AnalyticsService_InsertAnalyticsNumberOfTasks_FullMethodName                           = "/analytics.AnalyticsService/InsertAnalyticsNumberOfTasks"
	AnalyticsService_IncreaseAnalyticsNumberOfTasksTaskCount_FullMethodName                = "/analytics.AnalyticsService/IncreaseAnalyticsNumberOfTasksTaskCount"
	AnalyticsService_DecreaseAnalyticsNumberOfTasksTaskCount_FullMethodName                = "/analytics.AnalyticsService/DecreaseAnalyticsNumberOfTasksTaskCount"
	AnalyticsService_GetAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName             = "/analytics.AnalyticsService/GetAnalyticsNumberOfTasksByStatusTaskCount"
	AnalyticsService_InsertAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName          = "/analytics.AnalyticsService/InsertAnalyticsNumberOfTasksByStatusTaskCount"
	AnalyticsService_IncreaseAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName        = "/analytics.AnalyticsService/IncreaseAnalyticsNumberOfTasksByStatusTaskCount"
	AnalyticsService_DecreaseAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName        = "/analytics.AnalyticsService/DecreaseAnalyticsNumberOfTasksByStatusTaskCount"
	AnalyticsService_GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus_FullMethodName      = "/analytics.AnalyticsService/GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus"
	AnalyticsService_InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus_FullMethodName   = "/analytics.AnalyticsService/InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus"
	AnalyticsService_IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus_FullMethodName = "/analytics.AnalyticsService/IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus"
	AnalyticsService_GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_FullMethodName     = "/analytics.AnalyticsService/GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn"
	AnalyticsService_InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_FullMethodName  = "/analytics.AnalyticsService/InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn"
	AnalyticsService_RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_FullMethodName  = "/analytics.AnalyticsService/RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn"
	AnalyticsService_InsertAnalyticsIsProjectFinishedByDeadline_FullMethodName             = "/analytics.AnalyticsService/InsertAnalyticsIsProjectFinishedByDeadline"
	AnalyticsService_IsProjectFinishedByDeadline_FullMethodName                            = "/analytics.AnalyticsService/IsProjectFinishedByDeadline"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	// 1. ANALYTICS NUMBER OF TASKS METHODS - GET, INSERT, INCREASE AND DECREASE
	GetAnalyticsNumberOfTasks(ctx context.Context, in *AnalyticsNumberOfTasksRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksResponse, error)
	InsertAnalyticsNumberOfTasks(ctx context.Context, in *AnalyticsNumberOfTasksRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksResponse, error)
	IncreaseAnalyticsNumberOfTasksTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksResponse, error)
	DecreaseAnalyticsNumberOfTasksTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksResponse, error)
	// 2. ANALYTICS NUMBER OF TASKS BY TASK STATUS METHODS - GET, INSERT, INCREASE AND DECREASE
	GetAnalyticsNumberOfTasksByStatusTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksByStatusRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksByStatusResponse, error)
	InsertAnalyticsNumberOfTasksByStatusTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksByStatusRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksByStatusResponse, error)
	IncreaseAnalyticsNumberOfTasksByStatusTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksByStatusRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksByStatusResponse, error)
	DecreaseAnalyticsNumberOfTasksByStatusTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksByStatusRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksByStatusResponse, error)
	// 3. ANALYTICS FOR EACH TASK HOW MUCH TIME WAS IN EACH STATUS METHODS - GET, INSERT, INCREASE AND DECREASE
	GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx context.Context, in *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest, opts ...grpc.CallOption) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse, error)
	InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx context.Context, in *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest, opts ...grpc.CallOption) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse, error)
	IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx context.Context, in *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest, opts ...grpc.CallOption) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse, error)
	// 4. ANALYTICS FOR EACH USER ON WHICH TASKS IS HE CURRENTLY ON METHODS - GET, INSERT, REMOVE
	GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx context.Context, in *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest, opts ...grpc.CallOption) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error)
	InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx context.Context, in *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest, opts ...grpc.CallOption) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error)
	RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx context.Context, in *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest, opts ...grpc.CallOption) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error)
	// 5. ANALYTICS IS PROJECT FINISHED BY DEADLINE METHODS - GET, INSERT
	InsertAnalyticsIsProjectFinishedByDeadline(ctx context.Context, in *AnalyticsIsProjectFinishedByDeadlineRequest, opts ...grpc.CallOption) (*AnalyticsIsProjectFinishedByDeadlineResponse, error)
	IsProjectFinishedByDeadline(ctx context.Context, in *AnalyticsIsProjectFinishedByDeadlineRequest, opts ...grpc.CallOption) (*IsFinishedResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) GetAnalyticsNumberOfTasks(ctx context.Context, in *AnalyticsNumberOfTasksRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsNumberOfTasksResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetAnalyticsNumberOfTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) InsertAnalyticsNumberOfTasks(ctx context.Context, in *AnalyticsNumberOfTasksRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsNumberOfTasksResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_InsertAnalyticsNumberOfTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) IncreaseAnalyticsNumberOfTasksTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsNumberOfTasksResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_IncreaseAnalyticsNumberOfTasksTaskCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) DecreaseAnalyticsNumberOfTasksTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsNumberOfTasksResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_DecreaseAnalyticsNumberOfTasksTaskCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetAnalyticsNumberOfTasksByStatusTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksByStatusRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksByStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsNumberOfTasksByStatusResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) InsertAnalyticsNumberOfTasksByStatusTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksByStatusRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksByStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsNumberOfTasksByStatusResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_InsertAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) IncreaseAnalyticsNumberOfTasksByStatusTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksByStatusRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksByStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsNumberOfTasksByStatusResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_IncreaseAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) DecreaseAnalyticsNumberOfTasksByStatusTaskCount(ctx context.Context, in *AnalyticsNumberOfTasksByStatusRequest, opts ...grpc.CallOption) (*AnalyticsNumberOfTasksByStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsNumberOfTasksByStatusResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_DecreaseAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx context.Context, in *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest, opts ...grpc.CallOption) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx context.Context, in *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest, opts ...grpc.CallOption) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx context.Context, in *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest, opts ...grpc.CallOption) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx context.Context, in *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest, opts ...grpc.CallOption) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx context.Context, in *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest, opts ...grpc.CallOption) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx context.Context, in *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest, opts ...grpc.CallOption) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) InsertAnalyticsIsProjectFinishedByDeadline(ctx context.Context, in *AnalyticsIsProjectFinishedByDeadlineRequest, opts ...grpc.CallOption) (*AnalyticsIsProjectFinishedByDeadlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsIsProjectFinishedByDeadlineResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_InsertAnalyticsIsProjectFinishedByDeadline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) IsProjectFinishedByDeadline(ctx context.Context, in *AnalyticsIsProjectFinishedByDeadlineRequest, opts ...grpc.CallOption) (*IsFinishedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsFinishedResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_IsProjectFinishedByDeadline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
type AnalyticsServiceServer interface {
	// 1. ANALYTICS NUMBER OF TASKS METHODS - GET, INSERT, INCREASE AND DECREASE
	GetAnalyticsNumberOfTasks(context.Context, *AnalyticsNumberOfTasksRequest) (*AnalyticsNumberOfTasksResponse, error)
	InsertAnalyticsNumberOfTasks(context.Context, *AnalyticsNumberOfTasksRequest) (*AnalyticsNumberOfTasksResponse, error)
	IncreaseAnalyticsNumberOfTasksTaskCount(context.Context, *AnalyticsNumberOfTasksRequest) (*AnalyticsNumberOfTasksResponse, error)
	DecreaseAnalyticsNumberOfTasksTaskCount(context.Context, *AnalyticsNumberOfTasksRequest) (*AnalyticsNumberOfTasksResponse, error)
	// 2. ANALYTICS NUMBER OF TASKS BY TASK STATUS METHODS - GET, INSERT, INCREASE AND DECREASE
	GetAnalyticsNumberOfTasksByStatusTaskCount(context.Context, *AnalyticsNumberOfTasksByStatusRequest) (*AnalyticsNumberOfTasksByStatusResponse, error)
	InsertAnalyticsNumberOfTasksByStatusTaskCount(context.Context, *AnalyticsNumberOfTasksByStatusRequest) (*AnalyticsNumberOfTasksByStatusResponse, error)
	IncreaseAnalyticsNumberOfTasksByStatusTaskCount(context.Context, *AnalyticsNumberOfTasksByStatusRequest) (*AnalyticsNumberOfTasksByStatusResponse, error)
	DecreaseAnalyticsNumberOfTasksByStatusTaskCount(context.Context, *AnalyticsNumberOfTasksByStatusRequest) (*AnalyticsNumberOfTasksByStatusResponse, error)
	// 3. ANALYTICS FOR EACH TASK HOW MUCH TIME WAS IN EACH STATUS METHODS - GET, INSERT, INCREASE AND DECREASE
	GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus(context.Context, *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse, error)
	InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus(context.Context, *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse, error)
	IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus(context.Context, *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse, error)
	// 4. ANALYTICS FOR EACH USER ON WHICH TASKS IS HE CURRENTLY ON METHODS - GET, INSERT, REMOVE
	GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(context.Context, *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error)
	InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(context.Context, *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error)
	RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(context.Context, *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error)
	// 5. ANALYTICS IS PROJECT FINISHED BY DEADLINE METHODS - GET, INSERT
	InsertAnalyticsIsProjectFinishedByDeadline(context.Context, *AnalyticsIsProjectFinishedByDeadlineRequest) (*AnalyticsIsProjectFinishedByDeadlineResponse, error)
	IsProjectFinishedByDeadline(context.Context, *AnalyticsIsProjectFinishedByDeadlineRequest) (*IsFinishedResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) GetAnalyticsNumberOfTasks(context.Context, *AnalyticsNumberOfTasksRequest) (*AnalyticsNumberOfTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyticsNumberOfTasks not implemented")
}
func (UnimplementedAnalyticsServiceServer) InsertAnalyticsNumberOfTasks(context.Context, *AnalyticsNumberOfTasksRequest) (*AnalyticsNumberOfTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAnalyticsNumberOfTasks not implemented")
}
func (UnimplementedAnalyticsServiceServer) IncreaseAnalyticsNumberOfTasksTaskCount(context.Context, *AnalyticsNumberOfTasksRequest) (*AnalyticsNumberOfTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseAnalyticsNumberOfTasksTaskCount not implemented")
}
func (UnimplementedAnalyticsServiceServer) DecreaseAnalyticsNumberOfTasksTaskCount(context.Context, *AnalyticsNumberOfTasksRequest) (*AnalyticsNumberOfTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseAnalyticsNumberOfTasksTaskCount not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetAnalyticsNumberOfTasksByStatusTaskCount(context.Context, *AnalyticsNumberOfTasksByStatusRequest) (*AnalyticsNumberOfTasksByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyticsNumberOfTasksByStatusTaskCount not implemented")
}
func (UnimplementedAnalyticsServiceServer) InsertAnalyticsNumberOfTasksByStatusTaskCount(context.Context, *AnalyticsNumberOfTasksByStatusRequest) (*AnalyticsNumberOfTasksByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAnalyticsNumberOfTasksByStatusTaskCount not implemented")
}
func (UnimplementedAnalyticsServiceServer) IncreaseAnalyticsNumberOfTasksByStatusTaskCount(context.Context, *AnalyticsNumberOfTasksByStatusRequest) (*AnalyticsNumberOfTasksByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseAnalyticsNumberOfTasksByStatusTaskCount not implemented")
}
func (UnimplementedAnalyticsServiceServer) DecreaseAnalyticsNumberOfTasksByStatusTaskCount(context.Context, *AnalyticsNumberOfTasksByStatusRequest) (*AnalyticsNumberOfTasksByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseAnalyticsNumberOfTasksByStatusTaskCount not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus(context.Context, *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus not implemented")
}
func (UnimplementedAnalyticsServiceServer) InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus(context.Context, *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus not implemented")
}
func (UnimplementedAnalyticsServiceServer) IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus(context.Context, *AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest) (*AnalyticsForEachTaskHowMuchTimeWasInEachStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(context.Context, *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn not implemented")
}
func (UnimplementedAnalyticsServiceServer) InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(context.Context, *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn not implemented")
}
func (UnimplementedAnalyticsServiceServer) RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(context.Context, *AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest) (*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn not implemented")
}
func (UnimplementedAnalyticsServiceServer) InsertAnalyticsIsProjectFinishedByDeadline(context.Context, *AnalyticsIsProjectFinishedByDeadlineRequest) (*AnalyticsIsProjectFinishedByDeadlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAnalyticsIsProjectFinishedByDeadline not implemented")
}
func (UnimplementedAnalyticsServiceServer) IsProjectFinishedByDeadline(context.Context, *AnalyticsIsProjectFinishedByDeadlineRequest) (*IsFinishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsProjectFinishedByDeadline not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_GetAnalyticsNumberOfTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsNumberOfTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetAnalyticsNumberOfTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetAnalyticsNumberOfTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetAnalyticsNumberOfTasks(ctx, req.(*AnalyticsNumberOfTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_InsertAnalyticsNumberOfTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsNumberOfTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).InsertAnalyticsNumberOfTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_InsertAnalyticsNumberOfTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).InsertAnalyticsNumberOfTasks(ctx, req.(*AnalyticsNumberOfTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_IncreaseAnalyticsNumberOfTasksTaskCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsNumberOfTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).IncreaseAnalyticsNumberOfTasksTaskCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_IncreaseAnalyticsNumberOfTasksTaskCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).IncreaseAnalyticsNumberOfTasksTaskCount(ctx, req.(*AnalyticsNumberOfTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_DecreaseAnalyticsNumberOfTasksTaskCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsNumberOfTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).DecreaseAnalyticsNumberOfTasksTaskCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_DecreaseAnalyticsNumberOfTasksTaskCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).DecreaseAnalyticsNumberOfTasksTaskCount(ctx, req.(*AnalyticsNumberOfTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetAnalyticsNumberOfTasksByStatusTaskCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsNumberOfTasksByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetAnalyticsNumberOfTasksByStatusTaskCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetAnalyticsNumberOfTasksByStatusTaskCount(ctx, req.(*AnalyticsNumberOfTasksByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_InsertAnalyticsNumberOfTasksByStatusTaskCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsNumberOfTasksByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).InsertAnalyticsNumberOfTasksByStatusTaskCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_InsertAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).InsertAnalyticsNumberOfTasksByStatusTaskCount(ctx, req.(*AnalyticsNumberOfTasksByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_IncreaseAnalyticsNumberOfTasksByStatusTaskCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsNumberOfTasksByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).IncreaseAnalyticsNumberOfTasksByStatusTaskCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_IncreaseAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).IncreaseAnalyticsNumberOfTasksByStatusTaskCount(ctx, req.(*AnalyticsNumberOfTasksByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_DecreaseAnalyticsNumberOfTasksByStatusTaskCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsNumberOfTasksByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).DecreaseAnalyticsNumberOfTasksByStatusTaskCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_DecreaseAnalyticsNumberOfTasksByStatusTaskCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).DecreaseAnalyticsNumberOfTasksByStatusTaskCount(ctx, req.(*AnalyticsNumberOfTasksByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx, req.(*AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx, req.(*AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus(ctx, req.(*AnalyticsForEachTaskHowMuchTimeWasInEachStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx, req.(*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx, req.(*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn(ctx, req.(*AnalyticsForEachUserOnWhichTasksIsHeCurrentlyOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_InsertAnalyticsIsProjectFinishedByDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsIsProjectFinishedByDeadlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).InsertAnalyticsIsProjectFinishedByDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_InsertAnalyticsIsProjectFinishedByDeadline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).InsertAnalyticsIsProjectFinishedByDeadline(ctx, req.(*AnalyticsIsProjectFinishedByDeadlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_IsProjectFinishedByDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsIsProjectFinishedByDeadlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).IsProjectFinishedByDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_IsProjectFinishedByDeadline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).IsProjectFinishedByDeadline(ctx, req.(*AnalyticsIsProjectFinishedByDeadlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnalyticsNumberOfTasks",
			Handler:    _AnalyticsService_GetAnalyticsNumberOfTasks_Handler,
		},
		{
			MethodName: "InsertAnalyticsNumberOfTasks",
			Handler:    _AnalyticsService_InsertAnalyticsNumberOfTasks_Handler,
		},
		{
			MethodName: "IncreaseAnalyticsNumberOfTasksTaskCount",
			Handler:    _AnalyticsService_IncreaseAnalyticsNumberOfTasksTaskCount_Handler,
		},
		{
			MethodName: "DecreaseAnalyticsNumberOfTasksTaskCount",
			Handler:    _AnalyticsService_DecreaseAnalyticsNumberOfTasksTaskCount_Handler,
		},
		{
			MethodName: "GetAnalyticsNumberOfTasksByStatusTaskCount",
			Handler:    _AnalyticsService_GetAnalyticsNumberOfTasksByStatusTaskCount_Handler,
		},
		{
			MethodName: "InsertAnalyticsNumberOfTasksByStatusTaskCount",
			Handler:    _AnalyticsService_InsertAnalyticsNumberOfTasksByStatusTaskCount_Handler,
		},
		{
			MethodName: "IncreaseAnalyticsNumberOfTasksByStatusTaskCount",
			Handler:    _AnalyticsService_IncreaseAnalyticsNumberOfTasksByStatusTaskCount_Handler,
		},
		{
			MethodName: "DecreaseAnalyticsNumberOfTasksByStatusTaskCount",
			Handler:    _AnalyticsService_DecreaseAnalyticsNumberOfTasksByStatusTaskCount_Handler,
		},
		{
			MethodName: "GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus",
			Handler:    _AnalyticsService_GetAnalyticsForEachTaskHowMuchTimeWasInEachStatus_Handler,
		},
		{
			MethodName: "InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus",
			Handler:    _AnalyticsService_InsertAnalyticsForEachTaskHowMuchTimeWasInEachStatus_Handler,
		},
		{
			MethodName: "IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus",
			Handler:    _AnalyticsService_IncreaseAnalyticsForEachTaskHowMuchTimeWasInEachStatus_Handler,
		},
		{
			MethodName: "GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn",
			Handler:    _AnalyticsService_GetAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_Handler,
		},
		{
			MethodName: "InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn",
			Handler:    _AnalyticsService_InsertAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_Handler,
		},
		{
			MethodName: "RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn",
			Handler:    _AnalyticsService_RemoveAnalyticsForEachUserOnWhichTasksIsHeCurrentlyOn_Handler,
		},
		{
			MethodName: "InsertAnalyticsIsProjectFinishedByDeadline",
			Handler:    _AnalyticsService_InsertAnalyticsIsProjectFinishedByDeadline_Handler,
		},
		{
			MethodName: "IsProjectFinishedByDeadline",
			Handler:    _AnalyticsService_IsProjectFinishedByDeadline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics-service.proto",
}
