// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: project-service.proto

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectService_InsertProject_FullMethodName       = "/project.ProjectService/InsertProject"
	ProjectService_FindAllProjects_FullMethodName     = "/project.ProjectService/FindAllProjects"
	ProjectService_FindProjectById_FullMethodName     = "/project.ProjectService/FindProjectById"
	ProjectService_AddUser_FullMethodName             = "/project.ProjectService/AddUser"
	ProjectService_GetProjectsByUserId_FullMethodName = "/project.ProjectService/GetProjectsByUserId"
	ProjectService_DeleteProject_FullMethodName       = "/project.ProjectService/DeleteProject"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	InsertProject(ctx context.Context, in *InsertProjectRequest, opts ...grpc.CallOption) (*InsertProjectResponse, error)
	FindAllProjects(ctx context.Context, in *FindAllProjectsRequest, opts ...grpc.CallOption) (*FindAllProjectsResponse, error)
	FindProjectById(ctx context.Context, in *FindProjectByIdRequest, opts ...grpc.CallOption) (*FindProjectByIdResponse, error)
	AddUser(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*AddUserToProjectResponse, error)
	GetProjectsByUserId(ctx context.Context, in *GetProjectsByUserIdRequest, opts ...grpc.CallOption) (*GetProjectsByUserIdResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) InsertProject(ctx context.Context, in *InsertProjectRequest, opts ...grpc.CallOption) (*InsertProjectResponse, error) {
	out := new(InsertProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_InsertProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindAllProjects(ctx context.Context, in *FindAllProjectsRequest, opts ...grpc.CallOption) (*FindAllProjectsResponse, error) {
	out := new(FindAllProjectsResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindAllProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectById(ctx context.Context, in *FindProjectByIdRequest, opts ...grpc.CallOption) (*FindProjectByIdResponse, error) {
	out := new(FindProjectByIdResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddUser(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*AddUserToProjectResponse, error) {
	out := new(AddUserToProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectsByUserId(ctx context.Context, in *GetProjectsByUserIdRequest, opts ...grpc.CallOption) (*GetProjectsByUserIdResponse, error) {
	out := new(GetProjectsByUserIdResponse)
	err := c.cc.Invoke(ctx, ProjectService_GetProjectsByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	InsertProject(context.Context, *InsertProjectRequest) (*InsertProjectResponse, error)
	FindAllProjects(context.Context, *FindAllProjectsRequest) (*FindAllProjectsResponse, error)
	FindProjectById(context.Context, *FindProjectByIdRequest) (*FindProjectByIdResponse, error)
	AddUser(context.Context, *AddUserToProjectRequest) (*AddUserToProjectResponse, error)
	GetProjectsByUserId(context.Context, *GetProjectsByUserIdRequest) (*GetProjectsByUserIdResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) InsertProject(context.Context, *InsertProjectRequest) (*InsertProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertProject not implemented")
}
func (UnimplementedProjectServiceServer) FindAllProjects(context.Context, *FindAllProjectsRequest) (*FindAllProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllProjects not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectById(context.Context, *FindProjectByIdRequest) (*FindProjectByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectById not implemented")
}
func (UnimplementedProjectServiceServer) AddUser(context.Context, *AddUserToProjectRequest) (*AddUserToProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectsByUserId(context.Context, *GetProjectsByUserIdRequest) (*GetProjectsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsByUserId not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_InsertProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).InsertProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_InsertProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).InsertProject(ctx, req.(*InsertProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindAllProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindAllProjects(ctx, req.(*FindAllProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectById(ctx, req.(*FindProjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddUser(ctx, req.(*AddUserToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProjectsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectsByUserId(ctx, req.(*GetProjectsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertProject",
			Handler:    _ProjectService_InsertProject_Handler,
		},
		{
			MethodName: "FindAllProjects",
			Handler:    _ProjectService_FindAllProjects_Handler,
		},
		{
			MethodName: "FindProjectById",
			Handler:    _ProjectService_FindProjectById_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _ProjectService_AddUser_Handler,
		},
		{
			MethodName: "GetProjectsByUserId",
			Handler:    _ProjectService_GetProjectsByUserId_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectService_DeleteProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project-service.proto",
}
