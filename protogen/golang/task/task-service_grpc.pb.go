// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: task-service.proto

package task

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskService_InsertTask_FullMethodName              = "/task.TaskService/InsertTask"
	TaskService_ChangeTaskState_FullMethodName         = "/task.TaskService/ChangeTaskState"
	TaskService_FindAllTasks_FullMethodName            = "/task.TaskService/FindAllTasks"
	TaskService_FindTaskById_FullMethodName            = "/task.TaskService/FindTaskById"
	TaskService_FindAllTasksByProjectID_FullMethodName = "/task.TaskService/FindAllTasksByProjectID"
	TaskService_UpdateTask_FullMethodName              = "/task.TaskService/UpdateTask"
	TaskService_DocumentUpload_FullMethodName          = "/task.TaskService/DocumentUpload"
	TaskService_DocumentDownload_FullMethodName        = "/task.TaskService/DocumentDownload"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	InsertTask(ctx context.Context, in *InsertTaskRequest, opts ...grpc.CallOption) (*InsertTaskResponse, error)
	ChangeTaskState(ctx context.Context, in *ChangeTaskStateRequest, opts ...grpc.CallOption) (*FindTaskByIdResponse, error)
	FindAllTasks(ctx context.Context, in *FindAllTasksRequest, opts ...grpc.CallOption) (*FindAllTasksResponse, error)
	FindTaskById(ctx context.Context, in *FindTaskByIdRequest, opts ...grpc.CallOption) (*FindTaskByIdResponse, error)
	FindAllTasksByProjectID(ctx context.Context, in *FindAllTasksByProjectIDRequest, opts ...grpc.CallOption) (*FindAllTasksByProjectIDResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	DocumentUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[httpbody.HttpBody, UploadResponse], error)
	DocumentDownload(ctx context.Context, in *DownloadDocumentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[httpbody.HttpBody], error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) InsertTask(ctx context.Context, in *InsertTaskRequest, opts ...grpc.CallOption) (*InsertTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_InsertTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ChangeTaskState(ctx context.Context, in *ChangeTaskStateRequest, opts ...grpc.CallOption) (*FindTaskByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTaskByIdResponse)
	err := c.cc.Invoke(ctx, TaskService_ChangeTaskState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FindAllTasks(ctx context.Context, in *FindAllTasksRequest, opts ...grpc.CallOption) (*FindAllTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllTasksResponse)
	err := c.cc.Invoke(ctx, TaskService_FindAllTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FindTaskById(ctx context.Context, in *FindTaskByIdRequest, opts ...grpc.CallOption) (*FindTaskByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTaskByIdResponse)
	err := c.cc.Invoke(ctx, TaskService_FindTaskById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FindAllTasksByProjectID(ctx context.Context, in *FindAllTasksByProjectIDRequest, opts ...grpc.CallOption) (*FindAllTasksByProjectIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllTasksByProjectIDResponse)
	err := c.cc.Invoke(ctx, TaskService_FindAllTasksByProjectID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DocumentUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[httpbody.HttpBody, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskService_ServiceDesc.Streams[0], TaskService_DocumentUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[httpbody.HttpBody, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_DocumentUploadClient = grpc.ClientStreamingClient[httpbody.HttpBody, UploadResponse]

func (c *taskServiceClient) DocumentDownload(ctx context.Context, in *DownloadDocumentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[httpbody.HttpBody], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskService_ServiceDesc.Streams[1], TaskService_DocumentDownload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadDocumentRequest, httpbody.HttpBody]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_DocumentDownloadClient = grpc.ServerStreamingClient[httpbody.HttpBody]

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
type TaskServiceServer interface {
	InsertTask(context.Context, *InsertTaskRequest) (*InsertTaskResponse, error)
	ChangeTaskState(context.Context, *ChangeTaskStateRequest) (*FindTaskByIdResponse, error)
	FindAllTasks(context.Context, *FindAllTasksRequest) (*FindAllTasksResponse, error)
	FindTaskById(context.Context, *FindTaskByIdRequest) (*FindTaskByIdResponse, error)
	FindAllTasksByProjectID(context.Context, *FindAllTasksByProjectIDRequest) (*FindAllTasksByProjectIDResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	DocumentUpload(grpc.ClientStreamingServer[httpbody.HttpBody, UploadResponse]) error
	DocumentDownload(*DownloadDocumentRequest, grpc.ServerStreamingServer[httpbody.HttpBody]) error
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) InsertTask(context.Context, *InsertTaskRequest) (*InsertTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTask not implemented")
}
func (UnimplementedTaskServiceServer) ChangeTaskState(context.Context, *ChangeTaskStateRequest) (*FindTaskByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTaskState not implemented")
}
func (UnimplementedTaskServiceServer) FindAllTasks(context.Context, *FindAllTasksRequest) (*FindAllTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTasks not implemented")
}
func (UnimplementedTaskServiceServer) FindTaskById(context.Context, *FindTaskByIdRequest) (*FindTaskByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTaskById not implemented")
}
func (UnimplementedTaskServiceServer) FindAllTasksByProjectID(context.Context, *FindAllTasksByProjectIDRequest) (*FindAllTasksByProjectIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTasksByProjectID not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServiceServer) DocumentUpload(grpc.ClientStreamingServer[httpbody.HttpBody, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DocumentUpload not implemented")
}
func (UnimplementedTaskServiceServer) DocumentDownload(*DownloadDocumentRequest, grpc.ServerStreamingServer[httpbody.HttpBody]) error {
	return status.Errorf(codes.Unimplemented, "method DocumentDownload not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_InsertTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).InsertTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_InsertTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).InsertTask(ctx, req.(*InsertTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ChangeTaskState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTaskStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ChangeTaskState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ChangeTaskState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ChangeTaskState(ctx, req.(*ChangeTaskStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FindAllTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FindAllTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_FindAllTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FindAllTasks(ctx, req.(*FindAllTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FindTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTaskByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FindTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_FindTaskById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FindTaskById(ctx, req.(*FindTaskByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FindAllTasksByProjectID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTasksByProjectIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FindAllTasksByProjectID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_FindAllTasksByProjectID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FindAllTasksByProjectID(ctx, req.(*FindAllTasksByProjectIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DocumentUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServiceServer).DocumentUpload(&grpc.GenericServerStream[httpbody.HttpBody, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_DocumentUploadServer = grpc.ClientStreamingServer[httpbody.HttpBody, UploadResponse]

func _TaskService_DocumentDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDocumentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).DocumentDownload(m, &grpc.GenericServerStream[DownloadDocumentRequest, httpbody.HttpBody]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_DocumentDownloadServer = grpc.ServerStreamingServer[httpbody.HttpBody]

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertTask",
			Handler:    _TaskService_InsertTask_Handler,
		},
		{
			MethodName: "ChangeTaskState",
			Handler:    _TaskService_ChangeTaskState_Handler,
		},
		{
			MethodName: "FindAllTasks",
			Handler:    _TaskService_FindAllTasks_Handler,
		},
		{
			MethodName: "FindTaskById",
			Handler:    _TaskService_FindTaskById_Handler,
		},
		{
			MethodName: "FindAllTasksByProjectID",
			Handler:    _TaskService_FindAllTasksByProjectID_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DocumentUpload",
			Handler:       _TaskService_DocumentUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DocumentDownload",
			Handler:       _TaskService_DocumentDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "task-service.proto",
}
