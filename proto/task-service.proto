syntax = "proto3";

package task;

option go_package = "proto/task";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "workflow-service.proto";

service TaskService {
  rpc InsertTask(InsertTaskRequest) returns (InsertTaskResponse) {
    option (google.api.http) = {
      post: "/v1/tasks"
      body: "*"
    };
  }
  rpc ChangeTaskState(ChangeTaskStateRequest) returns (FindTaskByIdResponse) {
    option (google.api.http) = {
      patch: "/v1/tasks/{taskId}"
      body: "*"
    };
  }
  rpc FindAllTasks(FindAllTasksRequest) returns (FindAllTasksResponse) {
    option (google.api.http) = {
      get: "/v1/tasks"
    };
  }
  rpc FindTaskById(FindTaskByIdRequest) returns (FindTaskByIdResponse) {
    option (google.api.http) = {
      get: "/v1/tasks/{taskId}"
    };
  }
  rpc FindAllTasksByProjectID(FindAllTasksByProjectIDRequest) returns (FindAllTasksByProjectIDResponse) {
    option (google.api.http) = {
      get: "/v1/tasks/project/{projectId}"
    };
  }
   rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {
    option (google.api.http) = {
      patch: "/v1/tasks/{taskId}/update"
      body: "*"
    };
  }
  rpc DocumentUpload(stream google.api.HttpBody) returns (UploadResponse) {
    option (google.api.http) = {
      post: "/v1/tasks/upload",
      body: "*"
    };
  }
  rpc DocumentDownload(DownloadDocumentRequest) returns (stream google.api.HttpBody) {
    option (google.api.http) = {
      get: "/v1/tasks/{taskId}/documents/{fileName}"
    };
  }
}

enum Role {
  MEMBER = 0;
  MANAGER = 1;
  ROLE_UNSPECIFIED = 2;
}

message User {
  string id = 1;           
  string username = 2;
  string firstName = 3;
  string surname = 4;
  string email = 5;
  Role role = 6;
  repeated string projects = 7;
}

enum TaskState {
  STATE_UNSPECIFIED = 0;      // Default value if none specified.
  ON_HOLD = 1;                // Corresponds to "on hold" in Go.
  UNDER_CONSTRUCTION = 2;     // Corresponds to "under construction" in Go.
  FINISHED = 3;               // Corresponds to "finished" in Go.
}

message InsertTaskRequest {
  string taskId = 1;
  TaskState state = 2;
  string name = 3;
  string description = 4;
  string projectId = 5;
  repeated User users = 6;
}

message ChangeTaskStateRequest {
  string taskId = 1;
  TaskState state = 2;
}

message FindTaskByIdRequest {
  string taskId = 1;
}

message FindTaskByIdResponse {
  string taskId = 1;
  TaskState state = 2;
  string name = 3;
  string description = 4;
  string projectId = 5;
  repeated User users = 6;
  repeated string documents = 7;
  bool blocked = 8;
  repeated string dependsOn = 9;
}

message FindAllTasksRequest {}

message FindAllTasksResponse {
  repeated FindTaskByIdResponse tasks = 1;
}

message InsertTaskResponse {
  bool accepted = 1;
}

message FindAllTasksByProjectIDRequest {
  string projectId = 1;
}

message FindAllTasksByProjectIDResponse {
  repeated FindTaskByIdResponse tasks = 1;
  workflow.GetWorkflowsByProjectIdResponse workflows = 2;
}

message UpdateTaskRequest {
  string taskId = 1;
  string name = 2;
  string description = 3;
  TaskState state = 4;
  repeated User users = 5;
}

message UpdateTaskResponse {
  string taskId = 1;
  string name = 2;
  TaskState state = 3;
  string description = 4;
  repeated User users = 5;
}

message UploadResponse {
  bool success = 1;
  string message = 2;
}

message DownloadDocumentRequest {
  string taskId = 1;
  string fileName = 2;
}

